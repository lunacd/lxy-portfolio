/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    users: User;
    media: Media;
    document: Document;
    projects: Project;
    projectPages: ProjectPage;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    global: Global;
    projectOrder: ProjectOrder;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "document".
 */
export interface Document {
  id: number;
  name: string;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects".
 */
export interface Project {
  id: number;
  name: string;
  uri: string;
  isMainProject: boolean;
  duration?: string | null;
  category: string;
  focuses?:
    | {
        focus: string;
        focusId: string;
        id?: string | null;
      }[]
    | null;
  brief?: string | null;
  projectImage?: (number | null) | Media;
  mobileProjectImage?: (number | null) | Media;
  projectGalleryImage: number | Media;
  backgroundColor?: string | null;
  pageBackgroundColor?: string | null;
  textColor: 'light' | 'dark';
  imageCover?: boolean | null;
  awardImage?: (number | null) | Media;
  externalLink?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projectPages".
 */
export interface ProjectPage {
  id: number;
  projectName: string;
  blocks: (
    | {
        text: string;
        type: 'title' | 'subtitle';
        color: 'dark' | 'light';
        id?: string | null;
        blockName?: string | null;
        blockType: 'title';
      }
    | {
        text: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        bottomMargin: boolean;
        id?: string | null;
        blockName?: string | null;
        blockType: 'text';
      }
    | {
        items: {
          image: number | Media;
          text: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
        }[];
        spacing: 'small' | 'medium' | 'regular' | 'large' | 'xl' | 'xxl';
        bottomMargin: boolean;
        id?: string | null;
        blockName?: string | null;
        blockType: 'horizontalGallery';
      }
    | {
        image: number | Media;
        imageSize: number;
        bottomMargin: boolean;
        id?: string | null;
        blockName?: string | null;
        blockType: 'image';
      }
    | {
        embedLink: string;
        width: number;
        height: number;
        bottomMargin: boolean;
        id?: string | null;
        blockName?: string | null;
        blockType: 'youtube';
      }
    | {
        label: string;
        document: number | Document;
        bottomMargin: boolean;
        id?: string | null;
        blockName?: string | null;
        blockType: 'document';
      }
    | {
        blocks: (
          | {
              text: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              };
              bottomMargin: boolean;
              id?: string | null;
              blockName?: string | null;
              blockType: 'text';
            }
          | {
              text: string;
              type: 'title' | 'subtitle';
              color: 'dark' | 'light';
              id?: string | null;
              blockName?: string | null;
              blockType: 'title';
            }
          | {
              image: number | Media;
              imageSize: number;
              bottomMargin: boolean;
              id?: string | null;
              blockName?: string | null;
              blockType: 'image';
            }
          | {
              blocks: (
                | {
                    text: {
                      root: {
                        type: string;
                        children: {
                          type: string;
                          version: number;
                          [k: string]: unknown;
                        }[];
                        direction: ('ltr' | 'rtl') | null;
                        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                        indent: number;
                        version: number;
                      };
                      [k: string]: unknown;
                    };
                    bottomMargin: boolean;
                    id?: string | null;
                    blockName?: string | null;
                    blockType: 'text';
                  }
                | {
                    text: string;
                    type: 'title' | 'subtitle';
                    color: 'dark' | 'light';
                    id?: string | null;
                    blockName?: string | null;
                    blockType: 'title';
                  }
                | {
                    image: number | Media;
                    imageSize: number;
                    bottomMargin: boolean;
                    id?: string | null;
                    blockName?: string | null;
                    blockType: 'image';
                  }
              )[];
              spacing: 'small' | 'medium' | 'regular' | 'large' | 'xl' | 'xxl';
              bottomMargin: boolean;
              id?: string | null;
              blockName?: string | null;
              blockType: 'column';
            }
          | {
              blocks: (
                | {
                    text: {
                      root: {
                        type: string;
                        children: {
                          type: string;
                          version: number;
                          [k: string]: unknown;
                        }[];
                        direction: ('ltr' | 'rtl') | null;
                        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                        indent: number;
                        version: number;
                      };
                      [k: string]: unknown;
                    };
                    bottomMargin: boolean;
                    id?: string | null;
                    blockName?: string | null;
                    blockType: 'text';
                  }
                | {
                    text: string;
                    type: 'title' | 'subtitle';
                    color: 'dark' | 'light';
                    id?: string | null;
                    blockName?: string | null;
                    blockType: 'title';
                  }
                | {
                    image: number | Media;
                    imageSize: number;
                    bottomMargin: boolean;
                    id?: string | null;
                    blockName?: string | null;
                    blockType: 'image';
                  }
              )[];
              spacing: 'small' | 'medium' | 'regular' | 'large' | 'xl' | 'xxl';
              bottomMargin: boolean;
              id?: string | null;
              blockName?: string | null;
              blockType: 'row';
            }
        )[];
        spacing: 'small' | 'medium' | 'regular' | 'large' | 'xl' | 'xxl';
        bottomMargin: boolean;
        id?: string | null;
        blockName?: string | null;
        blockType: 'row';
      }
    | {
        blocks: (
          | {
              text: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              };
              bottomMargin: boolean;
              id?: string | null;
              blockName?: string | null;
              blockType: 'text';
            }
          | {
              text: string;
              type: 'title' | 'subtitle';
              color: 'dark' | 'light';
              id?: string | null;
              blockName?: string | null;
              blockType: 'title';
            }
          | {
              image: number | Media;
              imageSize: number;
              bottomMargin: boolean;
              id?: string | null;
              blockName?: string | null;
              blockType: 'image';
            }
          | {
              blocks: (
                | {
                    text: {
                      root: {
                        type: string;
                        children: {
                          type: string;
                          version: number;
                          [k: string]: unknown;
                        }[];
                        direction: ('ltr' | 'rtl') | null;
                        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                        indent: number;
                        version: number;
                      };
                      [k: string]: unknown;
                    };
                    bottomMargin: boolean;
                    id?: string | null;
                    blockName?: string | null;
                    blockType: 'text';
                  }
                | {
                    text: string;
                    type: 'title' | 'subtitle';
                    color: 'dark' | 'light';
                    id?: string | null;
                    blockName?: string | null;
                    blockType: 'title';
                  }
                | {
                    image: number | Media;
                    imageSize: number;
                    bottomMargin: boolean;
                    id?: string | null;
                    blockName?: string | null;
                    blockType: 'image';
                  }
              )[];
              spacing: 'small' | 'medium' | 'regular' | 'large' | 'xl' | 'xxl';
              bottomMargin: boolean;
              id?: string | null;
              blockName?: string | null;
              blockType: 'column';
            }
          | {
              blocks: (
                | {
                    text: {
                      root: {
                        type: string;
                        children: {
                          type: string;
                          version: number;
                          [k: string]: unknown;
                        }[];
                        direction: ('ltr' | 'rtl') | null;
                        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                        indent: number;
                        version: number;
                      };
                      [k: string]: unknown;
                    };
                    bottomMargin: boolean;
                    id?: string | null;
                    blockName?: string | null;
                    blockType: 'text';
                  }
                | {
                    text: string;
                    type: 'title' | 'subtitle';
                    color: 'dark' | 'light';
                    id?: string | null;
                    blockName?: string | null;
                    blockType: 'title';
                  }
                | {
                    image: number | Media;
                    imageSize: number;
                    bottomMargin: boolean;
                    id?: string | null;
                    blockName?: string | null;
                    blockType: 'image';
                  }
              )[];
              spacing: 'small' | 'medium' | 'regular' | 'large' | 'xl' | 'xxl';
              bottomMargin: boolean;
              id?: string | null;
              blockName?: string | null;
              blockType: 'row';
            }
        )[];
        spacing: 'small' | 'medium' | 'regular' | 'large' | 'xl' | 'xxl';
        bottomMargin: boolean;
        id?: string | null;
        blockName?: string | null;
        blockType: 'column';
      }
  )[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'document';
        value: number | Document;
      } | null)
    | ({
        relationTo: 'projects';
        value: number | Project;
      } | null)
    | ({
        relationTo: 'projectPages';
        value: number | ProjectPage;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "global".
 */
export interface Global {
  id: number;
  connectionPrompt: string;
  resume: number | Document;
  profile: string;
  profilePicture: number | Media;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projectOrder".
 */
export interface ProjectOrder {
  id: number;
  projects: {
    project: number | Project;
    id?: string | null;
  }[];
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}